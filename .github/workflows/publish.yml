name: Test and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov build

    - name: Run tests
      run: |
        python test_server.py
        echo "‚úÖ Basic server tests passed"

    - name: Test package build
      run: |
        python -m build
        echo "‚úÖ Package builds successfully"

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Get version from tag
      id: get-version
      run: |
        # Extract version from release tag (e.g., v1.2.3 -> 1.2.3)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è  Release tag version: $TAG_VERSION"

        # Get version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "
        import sys
        if sys.version_info >= (3, 11):
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                data = tomllib.load(f)
        else:
            import configparser
            config = configparser.ConfigParser()
            config.read('pyproject.toml')
            data = {'project': {'version': '1.0.0'}}
        print(data['project']['version'])
        ")
        echo "pyproject_version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT
        echo "üìù pyproject.toml version: $PYPROJECT_VERSION"

        # Verify versions match
        if [ "$TAG_VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "‚ùå Version mismatch! Tag: $TAG_VERSION, pyproject.toml: $PYPROJECT_VERSION"
          exit 1
        else
          echo "‚úÖ Versions match: $TAG_VERSION"
        fi

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
        echo "üéâ Published version ${{ steps.get-version.outputs.tag_version }} to PyPI!"
        echo "üåç Available globally: uvx engmanager-mcp"
